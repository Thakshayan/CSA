'use strict';

exports.__esModule = true;
exports.ComplexityVisitor = exports.CostCalculator = undefined;
exports.complexityLimitExceededErrorMessage = complexityLimitExceededErrorMessage;
exports.createComplexityLimitRule = createComplexityLimitRule;

var _graphql = require('graphql');

var _introspection = require('graphql/type/introspection');

var IntrospectionTypes = _interopRequireWildcard(_introspection);

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CostCalculator = exports.CostCalculator = function () {
  function CostCalculator() {
    _classCallCheck(this, CostCalculator);

    this.immediateCost = 0;
    this.fragmentCosts = [];

    this.cost = null;
  }

  CostCalculator.prototype.addImmediate = function addImmediate(cost) {
    this.immediateCost += cost;
  };

  CostCalculator.prototype.addFragment = function addFragment(costFactor, name) {
    this.fragmentCosts.push([costFactor, name]);
  };

  CostCalculator.prototype.calculateCost = function calculateCost(fragmentCalculators) {
    if (this.cost !== null) {
      return this.cost;
    }

    var cost = this.immediateCost;
    this.fragmentCosts.forEach(function (_ref) {
      var costFactor = _ref[0],
          name = _ref[1];

      var fragmentCalculator = fragmentCalculators[name];
      if (!fragmentCalculator) {
        // Illegal query with undefined fragment.
        return;
      }

      cost += costFactor * fragmentCalculator.calculateCost(fragmentCalculators);
    });

    this.cost = cost;
    return cost;
  };

  return CostCalculator;
}();

var ComplexityVisitor = exports.ComplexityVisitor = function () {
  function ComplexityVisitor(context, _ref2) {
    var _ref2$scalarCost = _ref2.scalarCost,
        scalarCost = _ref2$scalarCost === undefined ? 1 : _ref2$scalarCost,
        _ref2$objectCost = _ref2.objectCost,
        objectCost = _ref2$objectCost === undefined ? 0 : _ref2$objectCost,
        _ref2$listFactor = _ref2.listFactor,
        listFactor = _ref2$listFactor === undefined ? 10 : _ref2$listFactor,
        _ref2$introspectionLi = _ref2.introspectionListFactor,
        introspectionListFactor = _ref2$introspectionLi === undefined ? 2 : _ref2$introspectionLi;

    _classCallCheck(this, ComplexityVisitor);

    this.context = context;

    this.scalarCost = scalarCost;
    this.objectCost = objectCost;
    this.listFactor = listFactor;
    this.introspectionListFactor = introspectionListFactor;

    this.currentFragment = null;
    this.costFactor = 1;

    this.rootCalculator = new CostCalculator();
    this.fragmentCalculators = Object.create(null);

    this.Field = {
      enter: this.enterField,
      lea